<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:colors="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Themes.Colors"
                    xmlns:coreControls="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Controls;assembly=Sklavenwalker.CommonUtilities.WPF.Core"
                    xmlns:controls="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Controls"
                    xmlns:imaging="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Imaging;assembly=Sklavenwalker.CommonUtilities.WPF.Imaging"
                    xmlns:coreConverters="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Converters;assembly=Sklavenwalker.CommonUtilities.WPF.Core"
                    xmlns:converters="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Converters">

    <converters:BrushToColorConverter x:Key="BrushToColorConverter"/>
    <coreConverters:BooleanOrConverter x:Key="OrBooleanConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <coreConverters:TreeViewExpanderVisibilityConverter x:Key="TreeViewExpanderVisibilityConverter"/>
    <coreConverters:TreeViewItemIndentionConverter x:Key="TreeViewItemIndentionConverter"/>

    <Style x:Key="ViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="{DynamicResource {x:Static colors:CommonControlsColors.TreeFocusBorder}}" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Expander" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ViewItemFocusVisual}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <Path x:Name="Geometry" VerticalAlignment="Center" HorizontalAlignment="Center"
                              Stroke="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpander}}" Data="M 0 0 L 4 4 L 0 8 Z"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Geometry" Property="Data" Value="M 5 0 L 0 5 L 5 5 Z"/>
                            <Setter TargetName="Geometry"
                                    Property="Fill"
                                    Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderSelected}}"/>
                            <Setter TargetName="Geometry"
                                    Property="Stroke"
                                    Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderSelected}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Geometry" Property="Stroke" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderHover}}"/>
                            <Setter TargetName="Geometry" Property="Fill" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Geometry" Property="Stroke" 
                                    Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderSelectedHover}}"/>
                            <Setter TargetName="Geometry" Property="Fill" Value="Transparent"/>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="True"/>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource OrBooleanConverter}">
                                            <Binding Path="(Selector.IsSelectionActive)" RelativeSource="{RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}"/>
                                            <Binding Path="(coreControls:VirtualizingTreeView.IsContextMenuOpen)" RelativeSource="{RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Geometry" Property="Stroke" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderSelected}}"/>
                            <Setter TargetName="Geometry" Property="Fill" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderSelected}}"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.ControlTextColor}}" Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="True"/>
                                <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}"
                                           Value="False"/>
                                <Condition Binding="{Binding Path=(coreControls:VirtualizingTreeView.IsContextMenuOpen), RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Geometry" Property="Stroke" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderInactive}}"/>
                            <Setter TargetName="Geometry" Property="Fill" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderInactive}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" 
                                           Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="True"/>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource OrBooleanConverter}">
                                            <Binding Path="(Selector.IsSelectionActive)" RelativeSource="{RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}"/>
                                            <Binding Path="(coreControls:VirtualizingTreeView.IsContextMenuOpen)" RelativeSource="{RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Geometry" Property="Stroke" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderSelectedHover}}"/>
                            <Setter TargetName="Geometry" Property="Fill" Value="Transparent"/>
                            <Setter Value="{DynamicResource {x:Static SystemColors.ControlTextColor}}" Property="TextElement.Foreground"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" 
                                           Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="True"/>
                                <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="False"/>
                                <Condition Binding="{Binding Path=(coreControls:VirtualizingTreeView.IsContextMenuOpen), RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Geometry" Property="Stroke" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderInactiveHover}}"/>
                            <Setter TargetName="Geometry" Property="Fill" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeExpanderInactiveHover}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="True"/>
                                <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="False"/>
                                <Condition Binding="{Binding Path=(coreControls:VirtualizingTreeView.IsContextMenuOpen), RelativeSource={RelativeSource AncestorType={x:Type coreControls:VirtualizingTreeViewItem}}}" 
                                           Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Geometry" Property="Fill" Value="Transparent"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:ThemedVirtualizingTreeViewItem}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Panel.ZIndex" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeViewBackground}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ThemedVirtualizingTreeViewItem}">
                    <Border x:Name="Border" Padding="1" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Name="Indention">
                                    <ColumnDefinition.Width>
                                        <MultiBinding Converter="{StaticResource TreeViewItemIndentionConverter}">
                                            <Binding Path="Depth"/>
                                            <Binding Path="HierarchyIndention" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type coreControls:VirtualizingTreeView}}"/>
                                        </MultiBinding>
                                    </ColumnDefinition.Width>
                                </ColumnDefinition>
                                <ColumnDefinition Width="16"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ToggleButton x:Name="PART_Expander" Grid.Column="1" Style="{StaticResource Expander}" 
                                          VerticalAlignment="Center" IsChecked="{Binding IsExpanded, Mode=TwoWay}">
                                <ToggleButton.Visibility>
                                    <MultiBinding Converter="{StaticResource TreeViewExpanderVisibilityConverter}">
                                        <Binding Path="IsExpandable" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ShowRootExpander" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type coreControls:VirtualizingTreeView}}"/>
                                        <Binding Path="Depth"/>
                                    </MultiBinding>
                                </ToggleButton.Visibility>
                            </ToggleButton>
                            <ContentPresenter Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Stretch"
                                              Content="{Binding Item}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeItemHover}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <MultiBinding Converter="{StaticResource OrBooleanConverter}">
                                            <Binding Path="(Selector.IsSelectionActive)" RelativeSource="{RelativeSource Self}"/>
                                            <Binding Path="(coreControls:VirtualizingTreeView.IsContextMenuOpen)" RelativeSource="{RelativeSource Self}"/>
                                        </MultiBinding>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeItemSelectedBackground}}"/>
                            <Setter Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeViewSelectedText}}" Property="TextElement.Foreground"/>
                            <Setter Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={StaticResource BrushToColorConverter}}"
                                    Property="imaging:ImageThemingUtilities.ImageBackgroundColor"/>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="coreControls:VirtualizingTreeView.IsContextMenuOpen" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeItemInactiveBackground}}"/>
                            <Setter Value="{DynamicResource {x:Static colors:CommonControlsColors.TreeViewInactiveText}}" Property="TextElement.Foreground"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>