<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theming="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Themes.Colors"
                    xmlns:controls="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Controls">

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Ellipse x:Name="Circle" Height="19" Width="19"
                                         HorizontalAlignment="Center" VerticalAlignment="Center"
                                         Fill="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBackground}}"
                                         Stroke="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBorder}}" />
                                <Path x:Name="Arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5"
                                      HorizontalAlignment="Center" VerticalAlignment="Center" StrokeThickness="2" 
                                      Stroke="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxGlyph}}" />
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" 
                                              RecognizesAccessKey="true" SnapsToDevicePixels="true" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Data" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Circle" Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBorderHover}}"
                                        Property="Shape.Stroke"/>
                            <Setter TargetName="Circle"
                                        Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBackgroundHover}}"
                                        Property="Shape.Fill"/>
                            <Setter TargetName="Arrow" Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxGlyphHover}}"
                                        Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Circle" Property="Shape.StrokeThickness" Value="1.5"/>
                            <Setter TargetName="Circle"
                                        Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBorderDown}}"
                                        Property="Shape.Stroke"/>
                            <Setter TargetName="Circle"
                                        Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBackgroundDown}}"
                                        Property="Shape.Fill"/>
                            <Setter TargetName="Arrow" Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxGlyphDown}}"
                                        Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <FrameworkElement.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </FrameworkElement.LayoutTransform>
                                <Ellipse x:Name="Circle" Height="19" Width="19"
                                         HorizontalAlignment="Center" VerticalAlignment="Center"
                                         Fill="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBackground}}"
                                         Stroke="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBorder}}" />
                                <Path x:Name="Arrow" Data="M 1,1.5 L 4.5,5 8,1.5 "
                                      HorizontalAlignment="Center" VerticalAlignment="Center" StrokeThickness="2" 
                                      Stroke="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxGlyph}}" />
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" 
                                              RecognizesAccessKey="true" SnapsToDevicePixels="true" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Data" Value="M 1,4.5 L 4.5,1 8,4.5"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Circle" Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBorderHover}}"
                                        Property="Shape.Stroke"/>
                            <Setter TargetName="Circle"
                                        Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBackgroundHover}}"
                                        Property="Shape.Fill"/>
                            <Setter TargetName="Arrow" Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxGlyphHover}}"
                                        Property="Shape.Stroke"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Circle" Property="Shape.StrokeThickness" Value="1.5"/>
                            <Setter TargetName="Circle"
                                        Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBorderDown}}"
                                        Property="Shape.Stroke"/>
                            <Setter TargetName="Circle"
                                        Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxBackgroundDown}}"
                                        Property="Shape.Fill"/>
                            <Setter TargetName="Arrow" Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxGlyphDown}}"
                                        Property="Shape.Stroke"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:ThemedExpander}" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxText}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ThemedExpander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" DockPanel.Dock="Top"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Padding="{TemplateBinding Padding}"
                                          Foreground="{TemplateBinding Foreground}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="1" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontWeight="{TemplateBinding Control.FontWeight}"
                                          FontSize="{TemplateBinding Control.FontSize}" FontFamily="{TemplateBinding Control.FontFamily}"
                                          Style="{StaticResource ExpanderDownHeaderStyle}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" Visibility="Collapsed"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Foreground"
                                    Value="{DynamicResource {x:Static theming:CommonControlsColors.CheckBoxTextDisabled}}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Up">
                            <Setter Property="DockPanel.Dock"
                                    Value="Top"
                                    TargetName="ExpandSite"/>
                            <Setter Property="DockPanel.Dock"
                                    Value="Bottom"
                                    TargetName="HeaderSite"/>
                            <Setter Property="Style"
                                    Value="{StaticResource ExpanderUpHeaderStyle}"
                                    TargetName="HeaderSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>