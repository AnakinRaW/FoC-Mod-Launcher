<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls1="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Controls"
                    xmlns:colors="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Themes.Colors"
                    xmlns:fonts="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Themes.Fonts"
                    xmlns:nativeMethods="clr-namespace:AnakinRaW.CommonUtilities.Wpf.NativeMethods"
                    xmlns:converters="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Converters;assembly=AnakinRaW.CommonUtilities.WPF.Core"
                    xmlns:imaging="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Imaging;assembly=AnakinRaW.CommonUtilities.WPF.Imaging"
                    xmlns:input="clr-namespace:AnakinRaW.CommonUtilities.Wpf.Input;assembly=AnakinRaW.CommonUtilities.WPF.Core">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/AnakinRaW.CommonUtilities.WPF.Controls;component/Styles/ShadowChromeWindowStyle.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Style TargetType="{x:Type controls1:ThemedWindow}" BasedOn="{StaticResource {x:Type controls1:ShadowChromeWindow}}">
        <Style.Resources>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converters:BrushToColorConverter x:Key="BrushToColorConverter"/>
            <converters:BooleanAndConverter x:Key="AndBooleanConverter"/>
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsFullScreen}" Value="True">
                <Setter Property="Window.WindowStyle" Value="None"/>
                <Setter Property="Window.ResizeMode" Value="NoResize"/>
                <Setter Property="Window.WindowState" Value="Normal"/>
                <Setter Property="HasMaximizeButton" Value="False"/>
                <Setter Property="Control.BorderThickness" Value="0"/>
                <Setter Property="Control.Padding" Value="0"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:WindowColors.EnvironmentBackground}}"/>
        <Setter Property="imaging:ImageThemingUtilities.ImageBackgroundColor">
            <Setter.Value>
                <Binding Path="Background" RelativeSource="{RelativeSource Self}"
                         Converter="{StaticResource BrushToColorConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        <Setter Property="ActiveGlowColor"
                Value="{DynamicResource {x:Static colors:WindowColors.MainWindowActiveDefaultBorder}}"/>
        <Setter Property="InactiveGlowColor"
                Value="{DynamicResource {x:Static colors:WindowColors.MainWindowInactiveBorder}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls1:ThemedWindow}">
                    <AdornerDecorator>
                        <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Margin="{TemplateBinding Control.Padding}">
                            <Grid Background="{TemplateBinding Control.Background}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <controls1:MainWindowTitleBar x:Name="MainWindowTitleBar" Grid.Row="0" Grid.Column="0"
                                                             Background="{DynamicResource {x:Static colors:WindowColors.MainWindowActiveCaption}}"
                                                             TextElement.Foreground="{DynamicResource {x:Static colors:WindowColors.MainWindowActiveCaptionText}}">
                                    <imaging:ImageThemingUtilities.ImageBackgroundColor>
                                        <Binding Path="Background" RelativeSource="{RelativeSource Self}"
                                                 Converter="{StaticResource BrushToColorConverter}"/>
                                    </imaging:ImageThemingUtilities.ImageBackgroundColor>
                                    <Grid Grid.IsSharedSizeScope="True">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" SharedSizeGroup="AppIcon"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto" SharedSizeGroup="Buttons"/>
                                            </Grid.ColumnDefinitions>
                                            <controls1:SystemMenu x:Name="SystemMenu" Source="{TemplateBinding Icon}"
                                                                 VectorFill="{DynamicResource {x:Static colors:WindowColors.MainWindowActiveIconDefault}}"
                                                                 Width="32" Height="32" Margin="12,7,0,0" Grid.Column="0" VerticalAlignment="Top">
                                            </controls1:SystemMenu>
                                            <TextBlock Text="{TemplateBinding Window.Title}"
                                                       FontSize="{DynamicResource {x:Static fonts:EnvironmentFonts.CaptionFontSizeKey}}"
                                                       FontFamily="{DynamicResource {x:Static fonts:EnvironmentFonts.CaptionFontFamilyKey}}"
                                                       TextTrimming="CharacterEllipsis" VerticalAlignment="Center" Margin="6,7,0,4" Grid.Column="1"/>
                                            <StackPanel Orientation="Horizontal" Grid.Column="2">
                                                <controls1:WindowTitleBarButton x:Name="MinimizeButton" VerticalAlignment="Top"
                                                                               Command="{x:Static input:ViewCommands.MinimizeWindow}"
                                                                               BorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonActiveBorder}}"
                                                                               BorderThickness="1,0,1,1" 
                                                                               GlyphForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonActiveGlyph}}"
                                                                               HoverBackground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActive}}"
                                                                               HoverBorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActiveBorder}}"
                                                                               HoverForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActiveGlyph}}"
                                                                               HoverBorderThickness="1,0,1,1"
                                                                               PressedBackground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDown}}"
                                                                               PressedBorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDownBorder}}"
                                                                               PressedForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDownGlyph}}"
                                                                               PressedBorderThickness="1,0,1,1"
                                                                               Padding="0,3,0,0" Width="46" Height="32"
                                                                               HitTestResult="{x:Static nativeMethods:HitTestConstants.HTMINBUTTON}">
                                                    <ButtonBase.CommandParameter>
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </ButtonBase.CommandParameter>
                                                    <Button.Visibility>
                                                        <Binding Path="HasMinimizeButton" Converter="{StaticResource BooleanToVisibilityConverter}"/>
                                                    </Button.Visibility>
                                                    <Path Width="16" Height="16" Stretch="None" Data="F1 M 3,8 L 13,8 13,7 3,7 Z">
                                                        <Shape.Fill>
                                                            <Binding Path="(TextElement.Foreground)" RelativeSource="{RelativeSource Self}"/>
                                                        </Shape.Fill>
                                                    </Path>
                                                </controls1:WindowTitleBarButton>
                                                <controls1:WindowTitleBarButton x:Name="MaximizeRestoreButton" VerticalAlignment="Top"
                                                                               Command="{x:Static input:ViewCommands.ToggleMaximizeRestoreWindow}"
                                                                               BorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonActiveBorder}}"
                                                                               BorderThickness="1,0,1,1" 
                                                                               GlyphForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonActiveGlyph}}"
                                                                               HoverBackground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActive}}"
                                                                               HoverBorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActiveBorder}}"
                                                                               HoverForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActiveGlyph}}"
                                                                               HoverBorderThickness="1,0,1,1"
                                                                               PressedBackground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDown}}"
                                                                               PressedBorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDownBorder}}"
                                                                               PressedForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDownGlyph}}"
                                                                               PressedBorderThickness="1,0,1,1"
                                                                               Padding="0,3,0,0" Width="46" Height="32"
                                                                               HitTestResult="{x:Static nativeMethods:HitTestConstants.HTMAXBUTTON}">
                                                    <ButtonBase.CommandParameter>
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </ButtonBase.CommandParameter>
                                                    <Button.Visibility>
                                                        <Binding Path="HasMaximizeButton" Converter="{StaticResource BooleanToVisibilityConverter}"/>
                                                    </Button.Visibility>
                                                    <Path x:Name="MaximizeRestoreButtonPath" Width="16" Height="16" Stretch="None" 
                                                          Data="F1 M 12,12 L 4,12 4,4 12,4 M 3,13 L 13,13 13,3 3,3 Z">
                                                        <Shape.Fill>
                                                            <Binding Path="(TextElement.Foreground)" RelativeSource="{RelativeSource Self}"/>
                                                        </Shape.Fill>
                                                    </Path>
                                                </controls1:WindowTitleBarButton>
                                                <controls1:WindowTitleBarButton x:Name="CloseButton" VerticalAlignment="Top"
                                                                               Command="{x:Static input:ViewCommands.CloseWindow}"
                                                                               BorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonActiveBorder}}"
                                                                               BorderThickness="1,0,1,1" 
                                                                               GlyphForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonActiveGlyph}}"
                                                                               HoverBackground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActive}}"
                                                                               HoverBorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActiveBorder}}"
                                                                               HoverForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverActiveGlyph}}"
                                                                               HoverBorderThickness="1,0,1,1"
                                                                               PressedBackground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDown}}"
                                                                               PressedBorderBrush="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDownBorder}}"
                                                                               PressedForeground="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonDownGlyph}}"
                                                                               PressedBorderThickness="1,0,1,1"
                                                                               Padding="0,3,0,0" Width="46" Height="32"
                                                                               HitTestResult="{x:Static nativeMethods:HitTestConstants.HTCLOSE}">
                                                    <ButtonBase.CommandParameter>
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </ButtonBase.CommandParameter>
                                                    <Path Width="16" Height="16" Stretch="None" 
                                                          Data="F1 M 8.583,8 L 13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576 Z">
                                                        <Shape.Fill>
                                                            <Binding Path="(TextElement.Foreground)" RelativeSource="{RelativeSource Self}"/>
                                                        </Shape.Fill>
                                                    </Path>
                                                </controls1:WindowTitleBarButton>
                                            </StackPanel>
                                        </Grid>
                                    </Grid>
                                </controls1:MainWindowTitleBar>
                                <AdornerDecorator Grid.Row="1">
                                    <ContentPresenter/>
                                </AdornerDecorator>
                                <controls1:CustomResizeGrip Grid.Row="2" x:Name="ResizeGripControl" HorizontalAlignment="Right" Padding="0" Cursor="SizeNWSE"
                                                           VerticalAlignment="Bottom" Visibility="Collapsed">
                                </controls1:CustomResizeGrip>
                            </Grid>
                        </Border>
                    </AdornerDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
                            <Setter TargetName="ResizeGripControl" Property="FrameworkElement.Cursor" Value="SizeNESW"/>
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding IsFullScreen}">
                            <Setter TargetName="MainWindowTitleBar" Property="UIElement.Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="Window.WindowState" Value="Maximized">
                            <Setter TargetName="MaximizeRestoreButtonPath" Property="Path.Data" Value="F1 M 11.999,10.002 L 10.998,10.002 10.998,5.002 5.998,5.002 5.998,4.001 11.999,4.001 M 10.002,11.999 L 4.001,11.999 4.001,5.998 10.002,5.998 M 5.002,3 L 5.002,5.002 3,5.002 3,13 10.998,13 10.998,10.998 13,10.998 13,3 Z"/>
                            <Setter TargetName="MaximizeRestoreButton" Value="Restore" Property="FrameworkElement.ToolTip"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsGripVisible}" Value="True"/>
                                <Condition Binding="{Binding HasMaximizeButton}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ResizeGripControl" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <Trigger Property="Window.IsActive" Value="False">
                            <Setter TargetName="MainWindowTitleBar" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowInactiveCaption}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="MainWindowTitleBar" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowInactiveCaptionText}}"
                                    Property="TextElement.Foreground"/>
                            <Setter TargetName="SystemMenu" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowInactiveIconDefault}}" 
                                    Property="controls1:SystemMenu.VectorFill"/>
                            <Setter TargetName="MinimizeButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonInactiveBorder}}" 
                                    Property="Control.BorderBrush"/>
                            <Setter TargetName="MinimizeButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonInactiveGlyph}}" 
                                    Property="controls1:GlyphButton.GlyphForeground"/>
                            <Setter TargetName="MinimizeButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactive}}" 
                                    Property="controls1:GlyphButton.HoverBackground"/>
                            <Setter TargetName="MinimizeButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactiveBorder}}" 
                                    Property="controls1:GlyphButton.HoverBorderBrush"/>
                            <Setter TargetName="MinimizeButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactiveGlyph}}" 
                                    Property="controls1:GlyphButton.HoverForeground"/>
                            <Setter TargetName="MaximizeRestoreButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonInactiveBorder}}"
                                    Property="Control.BorderBrush"/>
                            <Setter TargetName="MaximizeRestoreButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonInactiveGlyph}}" 
                                    Property="controls1:GlyphButton.GlyphForeground"/>
                            <Setter TargetName="MaximizeRestoreButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactive}}" 
                                    Property="controls1:GlyphButton.HoverBackground"/>
                            <Setter TargetName="MaximizeRestoreButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactiveBorder}}" 
                                    Property="controls1:GlyphButton.HoverBorderBrush"/>
                            <Setter TargetName="MaximizeRestoreButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactiveGlyph}}" 
                                    Property="controls1:GlyphButton.HoverForeground"/>
                            <Setter TargetName="CloseButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonInactiveBorder}}" 
                                    Property="Control.BorderBrush"/>
                            <Setter TargetName="CloseButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonInactiveGlyph}}" 
                                    Property="controls1:GlyphButton.GlyphForeground"/>
                            <Setter TargetName="CloseButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactive}}" 
                                    Property="controls1:GlyphButton.HoverBackground"/>
                            <Setter TargetName="CloseButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactiveBorder}}" 
                                    Property="controls1:GlyphButton.HoverBorderBrush"/>
                            <Setter TargetName="CloseButton" Value="{DynamicResource {x:Static colors:WindowColors.MainWindowButtonHoverInactiveGlyph}}"
                                    Property="controls1:GlyphButton.HoverForeground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>