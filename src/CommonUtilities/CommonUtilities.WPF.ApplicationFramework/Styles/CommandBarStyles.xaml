<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.ApplicationFramework.Controls"
                    xmlns:colors="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Themes.Colors;assembly=Sklavenwalker.CommonUtilities.WPF.Controls"
                    xmlns:vs="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.Controls;assembly=Sklavenwalker.CommonUtilities.WPF.Controls"
                    xmlns:converters="clr-namespace:Sklavenwalker.CommonUtilities.Wpf.ApplicationFramework.Converters">


    <GridLength x:Key="MenuItemIconWidth">24</GridLength>
    <GridLength x:Key="MenuItemNameKeyBindingSpacerWidth">36</GridLength>
    <GridLength x:Key="MenuItemSubMenuArrowWidth">16</GridLength>

    <converters:ImageKeyToImageConverter x:Key="ImageKeyToImageConverter" />

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type controls:DynamicStyledMenuItem}, ResourceId=TopLevelHeaderTemplateKey}"
                     TargetType="{x:Type controls:DynamicStyledMenuItem}">
        <Border Width="10" Height="10" Background="Red"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type controls:DynamicStyledMenuItem}, ResourceId=SubmenuHeaderTemplateKey}"
                    TargetType="{x:Type controls:DynamicStyledMenuItem}">
        <Border Width="10" Height="10" Background="Green"/>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type controls:DynamicStyledMenuItem}, ResourceId=SubmenuItemTemplateKey}"
                     TargetType="{x:Type controls:DynamicStyledMenuItem}">
        <Grid MinHeight="22" MaxWidth="{x:Static vs:ThemedMenuItem.MaxMenuWidth}" Background="Transparent" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{StaticResource MenuItemIconWidth}" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="{StaticResource MenuItemNameKeyBindingSpacerWidth}"/>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                <ColumnDefinition Width="{StaticResource MenuItemSubMenuArrowWidth}"/>
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Background" Grid.ColumnSpan="5" Fill="Transparent" Stroke="Transparent"
                       StrokeThickness="1"/>
            <Border x:Name="IconBorder" Grid.Column="0" Width="18" Height="18" Margin="2,0,2,0" VerticalAlignment="Center" BorderThickness="0">
                <ContentPresenter x:Name="Icon" Width="16" Height="16" VerticalAlignment="Center" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <ContentPresenter Grid.Column="1" Margin="8,1,0,1" VerticalAlignment="Center"
                              ContentSource="Header" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            <TextBlock Grid.Column="3" Margin="2" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon">
                <Trigger.Value>
                    <x:NullExtension/>
                </Trigger.Value>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Background" Property="Fill"
                        Value="{DynamicResource {x:Static colors:CommandBarColors.CommandBarMenuItemHover}}"/>
                <Setter TargetName="Background" Property="Stroke"
                        Value="{DynamicResource {x:Static colors:CommandBarColors.CommandBarMenuItemHoverBorder}}"/>
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static colors:CommandBarColors.CommandBarMenuItemHoverText}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:CommandBarColors.CommandBarTextInactive}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style x:Key="MenuItemBaseStyle" TargetType="{x:Type controls:DynamicStyledMenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="6,0,0,1"/>
        <Setter Property="Header" Value="{Binding Text}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:CommandBarColors.CommandBarTextActive}}"/>
        <Setter Property="HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type controls:DynamicStyledMenuItem}, ResourceId=TopLevelHeaderTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                <Setter Property="Control.Padding" Value="2,0,2,3"/>
                <Setter Property="Control.Template"
                        Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type controls:DynamicStyledMenuItem}, ResourceId=SubmenuHeaderTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="{x:Static controls:DynamicStyledMenuItem.MenuStyleKey}"
           BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="{x:Type controls:DynamicStyledMenuItem}">
        <Setter Property="ItemsSource" Value="{Binding Items}"/>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
    </Style>


    <Style x:Key="{x:Static controls:DynamicStyledMenuItem.ButtonStyleKey}" 
           BasedOn="{StaticResource {x:Static controls:DynamicStyledMenuItem.MenuStyleKey}}"
           TargetType="{x:Type controls:DynamicStyledMenuItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="2,3,2,3"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:CommandBarColors.CommandBarTextActive}}"/>
        <Setter Property="Header" Value="{Binding Text, Mode=OneWay}"/>
        <Setter Property="InputGestureText" Value="{Binding ShortcutText, Mode=OneWay}"/>
        <Setter Property="ToolTip" Value="{Binding Tooltip, Mode=OneWay}"/>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="true"/>

        <Setter Property="Command" Value="{Binding Command}"/>

        <Setter Property="Icon">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource ImageKeyToImageConverter}">
                    <Binding Path="ImageKey"/>
                    <Binding Path="IsEnabled" RelativeSource="{RelativeSource Self}"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type controls:DynamicStyledMenuItem}, ResourceId=SubmenuItemTemplateKey}}"/>
    </Style>


    <Style x:Key="{x:Static controls:StylingContextMenu.ButtonStyleKey}" 
           BasedOn="{StaticResource {x:Static controls:DynamicStyledMenuItem.ButtonStyleKey}}"
           TargetType="{x:Type controls:DynamicStyledMenuItem}"/>
    <Style x:Key="{x:Static controls:StylingContextMenu.MenuStyleKey}"
           BasedOn="{StaticResource {x:Static controls:DynamicStyledMenuItem.MenuStyleKey}}"
           TargetType="{x:Type controls:DynamicStyledMenuItem}"/>
    <Style x:Key="{x:Static controls:StylingContextMenu.SeparatorStyleKey}"
           BasedOn="{StaticResource {x:Static controls:DynamicStyledMenuItem.SeparatorStyleKey}}"
           TargetType="{x:Type controls:DynamicStyledMenuItem}"/>

</ResourceDictionary>